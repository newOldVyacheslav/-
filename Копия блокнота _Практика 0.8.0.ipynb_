{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17IcY1UTGzZMUteC1w_OLi1DXlUbhQRJu","timestamp":1730799022432}],"collapsed_sections":["ra45s33wUt-C","QGrsZrv5U1s8"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"ra45s33wUt-C"}},{"cell_type":"markdown","source":["Задача: Создать чат бота для получения информации об исследованиях космоса\n","\n","Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:\n","\n","- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.\n","- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.\n","- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объекте, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.\n","- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.\n","Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.\n","\n","Требования:\n","- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.\n","- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.\n","- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.\n","- Представление данных: Представляйте данные в четкой и организованной форме.\n","- Опция выхода: позволяет пользователям выходить из приложения в любое время."],"metadata":{"id":"G56D5mNCUwp5"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wGeJM9n4UqUD"},"outputs":[],"source":["import requests\n","import datetime as dt\n","\n","\n","def send_request(url, **params):\n","    with requests.get(url, params) as response:\n","        if response.status_code == 200:\n","            data = response.json()\n","            return data\n","        else:\n","            return None\n","\n","\n","def get_apod_picture():\n","    while True:\n","        user_input = input(\"Введите дату в формате YYYY-MM-DD: \")\n","        if user_input.lower() == 'выйти':\n","            break\n","        try:\n","            date = dt.date.fromisoformat(user_input)\n","        except ValueError:\n","            print(\"Неверный ввод даты\")\n","            continue\n","        else:\n","            url = \"https://api.nasa.gov/planetary/apod\"\n","            params = {\n","                \"api_key\": API_KEY,\n","                \"date\": date,\n","            }\n","\n","            data = send_request(url, **params)\n","            if data == None:\n","                print(\"Что-то пошло не так...\")\n","                break\n","\n","            image_url = data[\"url\"]\n","            explanation = data[\"explanation\"]\n","            print(\n","                f\"Ссылка на изображение: {image_url}\\nОписание: {explanation}\"\n","            )\n","            return {\n","                \"url\": image_url,\n","                \"explanation\": explanation,\n","            }\n","\n","def get_mars_rover_photos():\n","    while True:\n","        user_input = input(\"Введите дату в формате YYYY-MM-DD: \")\n","        if user_input.lower() == 'выйти':\n","            break\n","        try:\n","            date = dt.date.fromisoformat(user_input)\n","        except ValueError:\n","            print(\"Неверный ввод даты\")\n","            continue\n","\n","        CAMERAS = ['FHAZ', 'RHAZ', 'MAST', 'CHEMCAM', 'MAHLI',\n","                   'MARDI', 'NAVCAM', 'PANCAM', 'MINITES']\n","        print('Список доступных камер: ', *CAMERAS, sep='\\n\\t')\n","        user_input = input(f\"Выберите камеру из доступных: \")\n","        if user_input.lower() == 'выйти':\n","            break\n","\n","        camera = user_input.upper()\n","        try:\n","            camera_index = CAMERAS.index(camera)\n","        except ValueError:\n","            print(\"Такой камеры не существует\")\n","            continue\n","        else:\n","            url = \"https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos\"\n","            params = {\n","                \"api_key\": API_KEY,\n","                \"earth_date\": date,\n","                \"camera\": camera\n","            }\n","\n","            data = send_request(url, **params)\n","            if data == None:\n","                print(\"Что-то пошло не так...\")\n","                break\n","\n","            photos = data[\"photos\"]\n","            if not photos:\n","                return \"Ничего не найдено\"\n","            else:\n","                image_urls = list(photo[\"img_src\"] for photo in photos)\n","                print('\\n'.join((\"Вот что удалось найти:\", *image_urls)))\n","                return image_urls\n","\n","\n","def get_near_earth_objects_info():\n","    while True:\n","        user_input = input(\"Введите дату в формате YYYY-MM-DD: \")\n","        if user_input == \"выйти\":\n","            break\n","        try:\n","            date = dt.date.fromisoformat(user_input)\n","        except ValueError:\n","            print(\"Неверный ввод даты\")\n","            continue\n","        else:\n","            url = \"https://api.nasa.gov/neo/rest/v1/feed\"\n","            params = {\n","                \"api_key\": API_KEY,\n","                \"start_date\": date,\n","                \"end_date\": date\n","            }\n","\n","            data = send_request(url, **params)\n","            if data == None:\n","                print(\"Что-то пошло не так...\")\n","                break\n","\n","            objects_info = data[\"near_earth_objects\"][date.isoformat()]\n","            objects_info = [\n","                {\n","                    \"name\": asteroid[\"name\"],\n","                    \"diameter\": asteroid[\"estimated_diameter\"][\"meters\"],\n","                    \"is_potentially_hazardous_asteroid\": asteroid[\n","                        \"is_potentially_hazardous_asteroid\"\n","                    ]\n","                }\n","                for asteroid in objects_info\n","            ]\n","\n","            for asteroid in objects_info:\n","                for k, v in asteroid.items():\n","                    if type(v) == dict:\n","                        print(k, end=' - ')\n","                        for diameter_name, diameter_value in v.items():\n","                            print(diameter_name, diameter_value,\n","                                  sep=' = ', end = ' ')\n","                        print()\n","                    else:\n","                        print(k, v, sep=' - ')\n","                print()\n","\n","            return objects_info\n","\n","\n","def get_space_weather():\n","    while True:\n","        user_input = input(\"Введите дату в формате YYYY-MM-DD: \")\n","        try:\n","            date = dt.date.fromisoformat(user_input)\n","        except:\n","            print(\"Неверный ввод даты\")\n","            continue\n","        else:\n","            url = \"https://api.nasa.gov/DONKI/notifications\"\n","            params = {\n","                \"startDate\": date,\n","                \"endDate\": date,\n","                \"api_key\": API_KEY\n","            }\n","\n","            user_input = input(\n","                \"Какую информацию вы хотите получить\\n\" +\n","                \"Магнитные бури / солнечные вспышки: \"\n","            ).lower()\n","            if user_input == \"магнитные бури\":\n","                params[\"type\"] = \"gst\"\n","            elif user_input == \"солнечные вспышки\":\n","                params[\"type\"] = \"flr\"\n","            else:\n","                print(\"Неверный ввод\")\n","                continue\n","\n","            data = send_request(url, **params)\n","            if data == None:\n","                print(\"Что-то пошло не так...\")\n","                break\n","            elif not data:\n","                print(\"Ничего не найдено\")\n","                break\n","\n","            notifications = []\n","            for notification in data:\n","                message = notification[\"messageBody\"]\n","                message = message[message.find(\"## Summary:\"):]\n","                notifications.append(message)\n","\n","            print(f\"{'_' * 80}\\n\".join(notifications))\n","            return notifications\n","\n","\n","def main():\n","    commands = [\"выйти\", \"apod\", \"фото марсоходов\", \"приближающиеся объекты\",\n","                \"космическая погода\"]\n","    print('список доступных комманд: ', *commands, sep='\\n\\t')\n","    while True:\n","        command = input().lower()\n","\n","        if command == \"выйти\":\n","            break\n","\n","        elif command == \"apod\":\n","            get_apod_picture()\n","\n","        elif command == \"фото марсоходов\":\n","            get_mars_rover_photos()\n","\n","        elif command == \"приближающиеся объекты\":\n","            get_near_earth_objects_info()\n","\n","        elif command == \"космическая погода\":\n","            get_space_weather()\n","\n","        else:\n","            print(\"Неизвестная команда\")\n","\n","\n","API_KEY = \"sPAYHxCQu3T7vHczW58T6ofe7HEBvoVpFBeRhZZD\"\n","\n","if __name__ == \"__main__\":\n","    main()"]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ia9UtA0cU1Iy"}},{"cell_type":"markdown","source":["Описание задачи\n","\n","Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:\n","\n","Требования:\n","\n","- Извлекать произведения искусства:\n","Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.\n","Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.\n","\n","- Фильтровать произведения искусства:\n","Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).\n","\n","- Отображать подробную информацию об оформлении:\n","Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.\n","После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.\n","\n","- Разбивка на страницы и взаимодействие с пользователем:\n","Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.\n","\n","Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.\n","\n","Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы."],"metadata":{"id":"Ofu_GmqrU1Iy"}},{"cell_type":"code","execution_count":7,"metadata":{"id":"jjUH1GznU1Iy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731335223310,"user_tz":-300,"elapsed":222888,"user":{"displayName":"Slagor","userId":"03320144618615022325"}},"outputId":"525113aa-be9c-44aa-d8c4-3eec245d83f8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Всего страниц: 10527\n","Текущая страница: 1\n","ID\t| TITLE\n","199603\t| Untitled, plate ten from See America First\n","191505\t| Rumble, from Brawling Spitfire Wrestling Series\n","180305\t| Ceremonial Hanging (palepai)\n","59607\t| Jelayah (Overcoat Dress)\n","34268\t| Dress\n","197860\t| Rose Bowl\n","222815\t| Kimkhwab Textile\n","222814\t| Kimkhwab Textile\n","222813\t| Kimkhwab Textile\n","222812\t| Kimkhwab Textile\n","222811\t| Kimkhwab Textile\n","62892\t| Kimkhwab Textile\n","Список доступных команд:\n","Show all - Вернуться на страницу со всеми произведениями\n","Page - выбрать страницу\n","Next - на следующую страницу\n","Back - На предыдущую страницу\n","Artist - получить произведения определённого исполнителя\n","More - Узнать подробнее о произведении\n","Exit - Выход из программы\n","Введите команду: artist\n","Введите имя исполнителя: van gogh\n","Всего страниц: 232\n","Текущая страница: 1\n","ID\t| TITLE\n","28560\t| The Bedroom\n","80607\t| Self-Portrait\n","14586\t| The Poet's Garden\n","28862\t| A Peasant Woman Digging in Front of Her Cottage\n","79349\t| The Drinkers\n","109314\t| Fishing in Spring, the Pont de Clichy (Asnières)\n","27949\t| Madame Roulin Rocking the Cradle (La berceuse)\n","27954\t| Terrace and Observation Deck at the Moulin de Blute-Fin, Montmartre\n","64957\t| Grapes, Lemons, Pears, and Apples\n","52733\t| Weeping Tree\n","Введите команду: more\n","Чтобы получить подробную информацию об оформлении - введите его ID:\n","28560\n","Название произведения:\n","\tThe Bedroom\n","Исполнители:\n","\tVincent van Gogh (Dutch, 1853–1890)\n","Дата:\n","\t1889\n","Носитель:\n","\tPainting\n","Введите команду: more\n","Чтобы получить подробную информацию об оформлении - введите его ID:\n","222811\n","Название произведения:\n","\tKimkhwab Textile\n","Исполнители:\n","\tIndia, Benares\n","Дата:\n","\tc. 1874\n","Носитель:\n","\tTextile\n","Введите команду: exit\n"]}],"source":["import requests\n","\n","\n","def send_request(url, **params):\n","    global last_required_url\n","\n","    with requests.get(url, params) as response:\n","        if response.ok:\n","            last_required_url = response.url\n","            data = response.json()\n","        else:\n","            response.raise_for_status()\n","\n","    return data\n","\n","\n","def swap_page(page_number):\n","    url = last_required_url\n","    try:\n","        data = send_request(url, page=page_number)\n","    except requests.HTTPError as error:\n","        print(error)\n","    else:\n","        return data\n","\n","\n","def get_artworks(page=1):\n","    url = \"https://api.artic.edu/api/v1/artworks\"\n","    fields = [\"id\", \"title\"]\n","    params = {\n","        \"page\": page,\n","        \"fields\": \",\".join(fields)\n","    }\n","\n","    try:\n","        data = send_request(url, **params)\n","    except requests.HTTPError as error:\n","        print(error)\n","    else:\n","        return data\n","\n","\n","def filter_artworks(artist_name):\n","    url = \"https://api.artic.edu/api/v1/artworks/search\"\n","    fields = [\"id\", \"title\", \"artist_ids\", \"artist_titles\"]\n","    params = {\n","        \"fields\": \",\".join(fields),\n","        \"q\": artist_name\n","    }\n","\n","    try:\n","        data = send_request(url, **params)\n","    except requests.HTTPError as error:\n","        print(error)\n","    else:\n","        return data\n","\n","\n","def print_artworks(data):\n","    pagination = data[\"pagination\"]\n","    current_page = pagination[\"current_page\"]\n","    total_pages = pagination[\"total_pages\"]\n","\n","    print(f\"Всего страниц: {total_pages}\")\n","    print(f\"Текущая страница: {current_page}\")\n","    print(\"ID\", \"TITLE\", sep=\"\\t| \")\n","    for artwork in data[\"data\"]:\n","        print(artwork[\"id\"], artwork[\"title\"], sep=\"\\t| \")\n","\n","\n","def print_more_info_about_artwork():\n","    print(\"Чтобы получить подробную информацию об оформлении - введите его ID:\")\n","    try:\n","        artwork_id = int(input())\n","    except ValueError:\n","        print(\"Неверный ввод\")\n","    else:\n","        url = f\"https://api.artic.edu/api/v1/artworks/{artwork_id}\"\n","        fields = [\"title\", \"artist_display\",\n","                  \"date_display\", \"artwork_type_title\"]\n","        try:\n","            data = send_request(url, fields=\",\".join(fields))\n","        except requests.HTTPError as error:\n","            print(error)\n","        else:\n","            artwork_info = data[\"data\"]\n","\n","            artwork_title = artwork_info[\"title\"]\n","            artwork_artists = artwork_info[\"artist_display\"]\n","            artwork_date = artwork_info[\"date_display\"]\n","            artwork_type = artwork_info[\"artwork_type_title\"]\n","\n","            artwork_info = {\n","                \"Название произведения\": artwork_title,\n","                \"Исполнители\": artwork_artists,\n","                \"Дата\" : artwork_date,\n","                \"Носитель\": artwork_type\n","            }\n","            for k, v in artwork_info.items():\n","                print(k, v.replace(\"\\n\", \"\\n\\t\"), sep=\":\\n\\t\")\n","\n","\n","def main():\n","    data = get_artworks()\n","    print_artworks(data)\n","\n","    commands = {\n","        \"Show all\": \"Вернуться на страницу со всеми произведениями\",\n","        \"Page\": \"выбрать страницу\",\n","        \"Next\": \"на следующую страницу\",\n","        \"Back\": \"На предыдущую страницу\",\n","        \"Artist\": \"получить произведения определённого исполнителя\",\n","        \"More\": \"Узнать подробнее о произведении\",\n","        \"Exit\": \"Выход из программы\"\n","    }\n","    print(\"Список доступных команд:\")\n","    for k, v in commands.items():\n","        print(k, v, sep=\" - \")\n","\n","    while True:\n","        pagination = data[\"pagination\"]\n","        current_page = pagination[\"current_page\"]\n","        total_pages = pagination[\"total_pages\"]\n","\n","        command = input(\"Введите команду: \").lower()\n","\n","        if command == \"page\":\n","            try:\n","                page_number = int(input(\"Введите номер страницы: \"))\n","            except ValueError:\n","                print(\"Неверный ввод\")\n","            else:\n","                data = swap_page(page_number)\n","                print_artworks(data)\n","\n","        elif command == \"next\":\n","            data = swap_page(current_page + 1)\n","            print_artworks(data)\n","\n","        elif command == \"back\":\n","            data = swap_page(current_page - 1)\n","            print_artworks(data)\n","\n","        elif command == \"artist\":\n","            artist_name = input(\"Введите имя исполнителя: \")\n","            data = filter_artworks(artist_name)\n","            print_artworks(data)\n","\n","        elif command == \"more\":\n","            print_more_info_about_artwork()\n","\n","        elif command == \"exit\":\n","            break\n","\n","        else:\n","            print(\"Неизвестная команда\")\n","\n","\n","last_required_url = \"\"\n","\n","if __name__ == \"__main__\":\n","    main()"]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"eecUb-akU1ji"}},{"cell_type":"markdown","source":["Задача: Создать программу по управлению портфелем криптовалют\n","\n","Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.\n","\n","Требования:\n","Получение текущих цен на криптовалюты:\n","\n","Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.\n","\n","Управление портфелем:\n","\n","- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.\n","- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).\n","\n","Отслеживание изменения цен:\n","\n","- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.\n","- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.\n","\n","Поиск исторических данных о ценах:\n","\n","- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.\n","- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).\n","\n","Взаимодействие с пользователем:\n","\n","- Реализуйте интерфейс командной строки для ввода данных пользователем.\n","- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.\n"],"metadata":{"id":"jsK7IKptU1ji"}},{"cell_type":"code","source":["import requests\n","\n","\n","def send_request(url, **params):\n","    with requests.get(url, params) as response:\n","        if response.ok:\n","            data = response.json()\n","        else:\n","            response.raise_for_status()\n","\n","    return data\n","\n","\n","def create_cryptocurrency_portfolio():\n","    pass\n","\n","\n","def main():\n","    pass\n","\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"_0DToTqlvywa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно: Задание 4"],"metadata":{"id":"QGrsZrv5U1s8"}},{"cell_type":"markdown","source":["Задание 4: Проектное\n","\n","Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!\n","\n","\n","Критерии приемки результата:\n","\n","- Проект включает в себя не менее 5 возможостей для пользователя\n","- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку\n","- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)\n","- Проект должен обязательно включать в себя ряд используемых конструкции:\n","    - Функции\n","    - Условные конструкции\n","    - Ввод/вывод\n","    - Словари/Списки\n","- Допускается использование библиотек:\n","    - requests\n","    - datetime\n","    - random"],"metadata":{"id":"qs_XITmYU1s8"}},{"cell_type":"markdown","source":["**Здесь добавьте описание вашего проекта**"],"metadata":{"id":"VKXhaJi4FL0B"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wiA55k1KU1s8"},"outputs":[],"source":["#  А здесь код"]}]}