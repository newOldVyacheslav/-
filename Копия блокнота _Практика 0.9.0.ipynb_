{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1zZbU5QXY3ZEtfsKWHQC-JGRhxn7rwGmd","timestamp":1731404117004}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО"],"metadata":{"id":"8hJfL9b2l439"}},{"cell_type":"code","source":["Горлов Вячеслав Валерьевич"],"metadata":{"id":"wRnqvYOkl6EX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дисклеймер"],"metadata":{"id":"weOtPwPQmgpD"}},{"cell_type":"markdown","source":["В данной практике вам необходимо применить все ваши знания по темам:\n","\n","- Функции\n","- Словари\n","- Списки\n","- Множества\n","- Условные конструкции\n","- Запросы\n","\n","и все что было изучено на прошлых практических занятиях\n","\n","В каждом задании кратко описаны функции, которые необходимо реализовать, детали реализации вы должны продумать самостоятельно"],"metadata":{"id":"LznB3uscmjDa"}},{"cell_type":"markdown","source":["# Задание 0"],"metadata":{"id":"7nSJIqkTvC_C"}},{"cell_type":"markdown","source":["Создайте функцию по нахождению уникальных элементов из двух списков\n","\n","\n","\n","```\n","a = [1, 2, 3, 4]\n","b = [3, 4, 5, 6]\n","```\n","\n"],"metadata":{"id":"exACjTiVvGUe"}},{"cell_type":"code","source":["def find_unque_elements(list_1, list_2):\n","    unique_elements = set(list_1).union(set(list_2))\n","    return unique_elements\n","\n","\n","a = [1, 2, 3, 4]\n","b = [3, 4, 5, 6]\n","\n","print(find_unque_elements(a,b))\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NqxZM-CuuyO3","executionInfo":{"status":"ok","timestamp":1731404551189,"user_tz":-300,"elapsed":357,"user":{"displayName":"Slagor","userId":"03320144618615022325"}},"outputId":"25f90e3e-57b9-48a7-b4c1-cd417fa57a26"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{1, 2, 3, 4, 5, 6}\n"]}]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"SVWNlBALpCNo"}},{"cell_type":"markdown","source":["Симулятор виртуального питомца\n","\n","Цель: создать виртуальный симулятор домашних животных, в котором пользователи смогут заводить питомцев и ухаживать за ними.\n","\n","Требования:\n","\n","- Функция для усыновления питомца (имя, тип, возраст).\n","- Функция для того, чтобы покормить питомца, поиграть с ним или уложить его спать.\n","- Функция для отображения состояния питомца (голод, радость, энергия)."],"metadata":{"id":"RcKA-VEqpC7f"}},{"cell_type":"code","source":["import time\n","\n","\n","def new_pet(name, pet_type, age):\n","    pet = {\n","        \"initialization\": {\n","            \"name\": name,\n","            \"type\": pet_type,\n","            \"age\": age\n","        },\n","        \"needs\": {\n","            \"is_starve\": True,\n","            \"is_happy\": False,\n","            \"is_exhausted\": True,\n","            \"is_sleep\": False,\n","        },\n","        \"time\": {\n","            \"fed_time_start\": 0,\n","            # Количество времени, чтобы снова проголодаться (в секундах)\n","            \"fed_time_need_passed\": 10,\n","\n","            \"slept_time_start\": 0,\n","            # Столько времени уйдёт на сон (в секундах)\n","            \"slept_time_need_passed\": 30\n","        }\n","    }\n","    return pet\n","\n","\n","def adopt_pet():\n","    name = input(\"Имя питомца: \")\n","    pet_type = input(\"Тип питомца: \")\n","    age = int(input(\"Возраст: \"))\n","\n","    pet = new_pet(name, pet_type, age)\n","\n","    pets.append(pet)\n","\n","\n","def feed_pet(pet):\n","    name = pet[\"initialization\"][\"name\"]\n","    is_starve = check_is_starve(pet)\n","    is_sleep = check_is_sleep(pet)\n","\n","    if is_sleep:\n","        print(f\"{name} спит\")\n","    elif not is_sleep:\n","        if not is_starve:\n","            print(f\"{name} не хочет есть\")\n","        elif is_starve:\n","            pet[\"needs\"][\"is_starve\"] = False\n","            pet[\"time\"][\"fed_time_start\"] = time.time()\n","            print(f\"{name} поел\")\n","\n","\n","def check_is_starve(pet):\n","    is_starve = pet[\"needs\"][\"is_starve\"]\n","\n","    if not is_starve:\n","        current_time = time.time()\n","        fed_time_start = pet[\"time\"][\"fed_time_start\"]\n","        fed_time_need_passed = pet[\"time\"][\"fed_time_need_passed\"]\n","\n","        if (current_time - fed_time_start) >= fed_time_need_passed:\n","            pet[\"needs\"][\"is_starve\"] = True\n","            return True\n","        else:\n","            return False\n","\n","    elif is_starve:\n","        return True\n","\n","\n","def play_with_pet(pet):\n","    name = pet[\"initialization\"][\"name\"]\n","    is_happy = pet[\"needs\"][\"is_happy\"]\n","    is_exhausted = pet[\"needs\"][\"is_exhausted\"]\n","    is_sleep = check_is_sleep(pet)\n","\n","    if is_sleep:\n","        print(f\"{name} спит\")\n","    elif not is_sleep:\n","        if not is_exhausted:\n","            pet[\"needs\"][\"is_happy\"] = True\n","            pet[\"needs\"][\"is_exhausted\"] = True\n","            print(f\"После игры {name} чувствует себя счастливее\")\n","        elif is_exhausted:\n","            print(f\"{name} устал и не хочет пока что играть, возможно ему следует поспать\")\n","\n","\n","def put_pet_to_bed(pet):\n","    name = pet[\"initialization\"][\"name\"]\n","    is_exhausted = pet[\"needs\"][\"is_exhausted\"]\n","    is_sleep = check_is_sleep(pet)\n","\n","    if is_sleep:\n","        print(f\"{name} уже спит\")\n","    elif not is_sleep:\n","\n","        if not is_exhausted:\n","            print(f\"{name} пока не хочет спать, попробуйте поиграть с ним\")\n","        elif is_exhausted:\n","            pet[\"needs\"][\"is_exhausted\"] = False\n","            pet[\"needs\"][\"is_sleep\"] = True\n","\n","            pet[\"time\"][\"slept_time_start\"] = time.time()\n","            print(f\"{name} уснул\")\n","\n","\n","def check_is_sleep(pet):\n","    is_sleep = pet[\"needs\"][\"is_sleep\"]\n","\n","    if is_sleep:\n","        current_time = time.time()\n","        slept_time_start = pet[\"time\"][\"slept_time_start\"]\n","        slept_time_need_passed = pet[\"time\"][\"slept_time_need_passed\"]\n","        if (current_time - slept_time_start) >= slept_time_need_passed:\n","            pet[\"needs\"][\"is_sleep\"] = False\n","            return False\n","        else:\n","            return True\n","    elif not is_sleep:\n","        return False\n","\n","\n","def main():\n","    current_chosen_pet = None\n","\n","    commands = [\"show pets\", \"adopt\", \"chose\",\n","                \"feed\", \"put to bed\", \"play\", \"exit\"]\n","    print(f\"Список доступных комманд:\\n\\t{', '.join(commands)}\")\n","\n","    while True:\n","        if not pets:\n","            print(\"У вас пока нет ни одного питомца, вы можете его усыновить\")\n","            adoption = input(\"Усыновить питомца (Да / Нет): \").lower()\n","            if adoption == \"нет\":\n","                break\n","            elif adoption == \"да\":\n","                adopt_pet()\n","            else:\n","                continue\n","\n","        elif pets:\n","            pets_names = [pet[\"initialization\"][\"name\"] for pet in pets]\n","\n","            command = input(\"Что вы хотите сделать: \")\n","\n","            if command == \"exit\":\n","                break\n","\n","            elif command == \"show pets\":\n","                print(f\"Ваши питомцы: {', '.join(pets_names)}\")\n","\n","            elif command == \"adopt\":\n","                adopt_pet()\n","\n","            elif command == \"chose\":\n","                name = input(\"Введите имя питомца: \")\n","                try:\n","                    pet = pets[pets_names.index(name)]\n","                except ValueError:\n","                    print(\"Питомец не найден\")\n","                else:\n","                    current_chosen_pet = pet\n","\n","            elif command in [\"feed\", \"put to bed\", \"play\"]:\n","                if current_chosen_pet is None:\n","                    print(\"Для начала выберите питомца, с которым желаете взаимодействовать (chose)\")\n","                    print(f\"Ваши питомцы: {', '.join(pets_names)}\")\n","                    continue\n","                else:\n","                    if command == \"feed\":\n","                        feed_pet(current_chosen_pet)\n","                    elif command == \"put to bed\":\n","                        put_pet_to_bed(current_chosen_pet)\n","                    elif command == \"play\":\n","                        play_with_pet(current_chosen_pet)\n","\n","            else:\n","                print(\"Неизвестная команда\")\n","\n","\n","pets = []\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"hE7mF-HXpJLO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731432189637,"user_tz":-300,"elapsed":4305775,"user":{"displayName":"Slagor","userId":"03320144618615022325"}},"outputId":"9e95838a-2085-4577-a0e3-510222c24f94"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["У вас пока нет ни одного питомца, вы можете его усыновить\n","Усыновить питомца (Да / Нет): да\n","Имя питомца: asas\n","Тип питомца: pet\n","Возраст: 12\n","Список доступных комманд:\n","show pets, adopt, chose, feed, put to bed, play, exit\n","Что вы хотите сделать: chose\n","Введите имя питомца: asas\n","Список доступных комманд:\n","show pets, adopt, chose, feed, put to bed, play, exit\n","Что вы хотите сделать: feed\n","asas поел\n","Список доступных комманд:\n","show pets, adopt, chose, feed, put to bed, play, exit\n","Что вы хотите сделать: feed\n","asas не хочет есть\n","Список доступных комманд:\n","show pets, adopt, chose, feed, put to bed, play, exit\n","Что вы хотите сделать: feed\n","asas поел\n","Список доступных комманд:\n","show pets, adopt, chose, feed, put to bed, play, exit\n","Что вы хотите сделать: play\n","asas устал и не хочет пока что играть, возможно ему следует поспать\n","Список доступных комманд:\n","show pets, adopt, chose, feed, put to bed, play, exit\n","Что вы хотите сделать: put to bed\n","asas уснул\n","Список доступных комманд:\n","show pets, adopt, chose, feed, put to bed, play, exit\n","Что вы хотите сделать: feed\n","asas спит\n","Список доступных комманд:\n","show pets, adopt, chose, feed, put to bed, play, exit\n","Что вы хотите сделать: exit\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"qZ7qFQnmssNd"}},{"cell_type":"markdown","source":["Рыцарь и дракон\n","\n","Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом\n","\n","Требования:\n","\n","- Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)\n","- Управление персонажем и мини сюжет\n","- Создание дракона (Имя, информация о здоровье и уроне)\n","- Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)\n","- Реализовать бой между драконом и рыцарем"],"metadata":{"id":"UaccTe7ltNvg"}},{"cell_type":"code","source":[],"metadata":{"id":"LCcxp5Q0srjY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 3\n"],"metadata":{"id":"N8oFiEXol3e2"}},{"cell_type":"markdown","source":["Цель - создать менеджера команды Pokémon, который позволит пользователям:\n","\n","- Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)\n","- Удалять покемонов из их команды.\n","- Просматривать подробную информацию обо всех покемонах в команде.\n","- Находить покемона по имени.\n","- Устраивать тренировочный бой между двумя покемонами\n","\n","Для данной задачи используйте: https://pokeapi.co/\n"],"metadata":{"id":"9p4WQG_Vl7wB"}},{"cell_type":"code","source":[],"metadata":{"id":"NnGYp1MTqi5k"},"execution_count":null,"outputs":[]}]}