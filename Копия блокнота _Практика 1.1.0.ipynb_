{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732614518856}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО:**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wZMLYG_G_-19"},"outputs":[],"source":["Горлов Вячеслав Валерьевич"]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["class Employee():\n","    def __init__(self, amount_of_working_hours):\n","        self.amount_of_working_hours = amount_of_working_hours\n","\n","    def calculate_salary(self):\n","        pass\n","\n","\n","class Manager(Employee):\n","    pass\n","\n","\n","class Developer(Employee):\n","    pass\n"],"metadata":{"id":"aexGXzqCAFH7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["class Transport():\n","    def __init__(self, name):\n","        self.name = name\n","\n","\n","class Car(Transport):\n","    def get_info(self):\n","        return f'Машина {self.name}, может ехать'\n","\n","\n","class Plane(Transport):\n","    def get_info(self):\n","        return f'Самолёт {self.name}, может летать'\n","\n","\n","class Ship(Transport):\n","    def get_info(self):\n","        return f'Судно {self.name}, может плыть (и тонуть)'\n"],"metadata":{"id":"WOFOZQmDBKf4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(Car('Lada').get_info())\n","print(Plane('Airbus').get_info())\n","print(Ship('Titanic').get_info())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vQxJSTHc9aeA","executionInfo":{"status":"ok","timestamp":1732616365755,"user_tz":-300,"elapsed":472,"user":{"displayName":"Slagor","userId":"03320144618615022325"}},"outputId":"0e8fb76c-2b18-4f27-eca3-88bff3db4eb6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Машина Lada, может ехать\n","Самолёт Airbus, может летать\n","Судно Titanic, может плыть (и тонуть)\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":["class Product():\n","    def __init__(self, name: str, price: float, category: str, amount: int):\n","        self.name = name\n","        self.price = price\n","        self.category = category\n","        self.amount = amount\n","\n","    def is_available(self):\n","        return self.amount > 0\n","\n","\n","class Catalog():\n","    def __init__(self, products: list[Product]):\n","        self.products = products\n","        self.products_names = self.get_products_names(self.products)\n","        self.products_categories = self.get_products_categories(self.products)\n","        self.products_prices = self.get_products_prices(self.products)\n","        self.products_amounts = self.get_products_amounts(self.products)\n","\n","    def get_products_names(self, products):\n","        names: list[str] = []\n","        for product in products:\n","            names.append(product.name)\n","        return names\n","\n","    def get_products_categories(self, products):\n","        categories: list[str] = []\n","        for product in products:\n","            category = product.category\n","            if category not in categories:\n","                categories.append(product.category)\n","        return categories\n","\n","    def get_products_prices(self, products):\n","        prices: list[float] = []\n","        for product in products:\n","            prices.append(product.price)\n","        return prices\n","\n","    def get_products_amounts(self, products):\n","        amounts: list[int] = []\n","        for product in self.products:\n","            amounts.append(product.amount)\n","        return amounts\n","\n","    def find_product(self, product_name: str):\n","        product_index = self.products_names.index(product_name)\n","        return self.products[product_index]\n","\n","    def filter_products_names_by_category(self, category):\n","        return self.get_products_names(list(filter(\n","            lambda product: product.category == category,\n","            self.products\n","        )))\n","\n","\n","class Customer():\n","    def __init__(self, name: str):\n","        self.name = name.capitalize()\n","        self.order_history = []\n","\n","    def get_info(self):\n","        return f'Имя: {self.name}\\nИстория заказов: {self.order_history}'\n","\n","    def add_order(self, order):\n","        self.order_history.append(\n","            Catalog(list(order.shopping_cart.cart.keys())).products_names)\n","\n","\n","class PromoCode():\n","    def __init__(self, name: str, discount: float):\n","        self.name = name\n","        self.discount = discount\n","        self.is_used = False\n","\n","    def check(self):\n","        if self.is_used:\n","            return None\n","        elif not self.is_used:\n","            return self\n","\n","    def use(self):\n","        self.is_used = True\n","\n","\n","class ShoppingCart():\n","    def __init__(self):\n","        self.cart: dict[Product, int] = {}\n","\n","    def add_product(self, product: Product):\n","        if not product.is_available():\n","            return f'Товара \"{product.name}\" нет в наличии'\n","        elif product.is_available():\n","            if product in self.cart:\n","                self.cart[product] += 1\n","            elif product not in self.cart:\n","                self.cart[product] = 1\n","            product.amount -= 1\n","            return f'\"{product.name}\" добавлено в корзину'\n","\n","    def remove_product(self, product: Product):\n","        if product not in self.cart:\n","            return f'У вас нет товара \"{product.name}\" в корзине'\n","        elif product in self.cart:\n","            self.cart[product] -= 1\n","            if self.cart[product] == 0:\n","                del self.cart[product]\n","            product.amount += 1\n","            return f'\"{product.name}\" удалено из корзины'\n","\n","    def update_product_amount(self, product: Product, amount: int):\n","        try:\n","            product_amount_in_cart = self.cart[product]\n","        except KeyError:\n","            text = f'У вас нет товара \"{product.name}\" в корзине.'\n","        else:\n","            delta_amount = abs(product_amount_in_cart - amount)\n","            if amount > product_amount_in_cart:\n","                for _ in range(delta_amount):\n","                    text = self.add_product(product)\n","                    if not product.is_available():\n","                        if _ == 0:\n","                            text += f' {delta_amount} шт'\n","                        elif _ > 0:\n","                            text += f' {_ + 1} шт'\n","                        break\n","                else:\n","                    text += f' {_ + 1} шт'\n","            elif amount < product_amount_in_cart:\n","                for _ in range(delta_amount):\n","                    text = self.remove_product(product)\n","                    if product not in self.cart:\n","                        if _ == 0:\n","                            text += f' {delta_amount} шт'\n","                        elif _ > 0:\n","                            text += f' {_ + 1} шт'\n","                        break\n","                else:\n","                    text += f' {_ + 1} шт'\n","            elif delta_amount == 0:\n","                return ''\n","        return text\n","\n","    def clear_cart(self):\n","        self.cart.clear()\n","\n","    def print_cart(self):\n","        if not self.cart:\n","            print('В корзине пока что пусто')\n","        else:\n","            longest_product_name_len = len(\n","                max(self.cart.keys(),\n","                    key=lambda product: len(product.name)).name)\n","            indent_size = max(12, longest_product_name_len)\n","            print(\n","                'Наименование'.ljust(indent_size),\n","                'Количество',\n","                'Стоимость (без учёта скидок и налога)'\n","            )\n","            for product, amount in self.cart.items():\n","                print(\n","                    product.name.ljust(indent_size),\n","                    str(amount).ljust(10),\n","                    product.price * amount\n","                )\n","\n","\n","class Order():\n","    def __init__(self,\n","                 shopping_cart: ShoppingCart,\n","                 customer: Customer,\n","                 promo: PromoCode | None = None):\n","        self.tax = 0.2\n","        self.shopping_cart = shopping_cart\n","        self.promo = promo.check() if promo else None\n","        self.total_price = self.calculate_total_price()\n","        self.customer = customer\n","\n","\n","    def calculate_total_price(self):\n","        cart = self.shopping_cart.cart\n","        subtotal = sum(\n","            product.price * amount for product, amount in cart.items()\n","        )\n","        if self.promo is None:\n","            discount = 0\n","        else:\n","            discount = self.promo.discount / 100\n","        discount_amount = subtotal * discount\n","        tax_amount = (subtotal - discount_amount) * self.tax\n","        return subtotal - discount_amount + tax_amount\n","\n","    def place(self):\n","        self.customer.add_order(self)\n","        self.shopping_cart.clear_cart()\n","        if self.promo:\n","            self.promo.use()\n","        print('Заказ оформлен')\n"],"metadata":{"id":"wkCcv_K-Bwdv","executionInfo":{"status":"ok","timestamp":1732991209712,"user_tz":-300,"elapsed":253,"user":{"displayName":"Slagor","userId":"03320144618615022325"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["products_data = [\n","  {\"name\": \"яблоко\", \"price\": 10, \"category\": \"фрукты\", \"amount\": 10},\n","  {\"name\": \"банан\", \"price\": 12, \"category\": \"фрукты\", \"amount\": 11},\n","  {\"name\": \"апельсин\", \"price\": 15, \"category\": \"фрукты\", \"amount\": 12},\n","  {\"name\": \"груша\", \"price\": 14, \"category\": \"фрукты\", \"amount\": 13},\n","  {\"name\": \"виноград\", \"price\": 18, \"category\": \"фрукты\", \"amount\": 14},\n","  {\"name\": \"персик\", \"price\": 20, \"category\": \"фрукты\", \"amount\": 15},\n","  {\"name\": \"ананас\", \"price\": 25, \"category\": \"фрукты\", \"amount\": 16},\n","  {\"name\": \"киви\", \"price\": 22, \"category\": \"фрукты\", \"amount\": 17},\n","  {\"name\": \"лимон\", \"price\": 11, \"category\": \"фрукты\", \"amount\": 18},\n","  {\"name\": \"манго\", \"price\": 30, \"category\": \"фрукты\", \"amount\": 19},\n","  {\"name\": \"картофель\", \"price\": 8, \"category\": \"овощи\", \"amount\": 20},\n","  {\"name\": \"морковь\", \"price\": 7, \"category\": \"овощи\", \"amount\": 21},\n","  {\"name\": \"помидор\", \"price\": 10, \"category\": \"овощи\", \"amount\": 22},\n","  {\"name\": \"огурец\", \"price\": 9, \"category\": \"овощи\", \"amount\": 23},\n","  {\"name\": \"лук\", \"price\": 6, \"category\": \"овощи\", \"amount\": 24},\n","  {\"name\": \"капуста\", \"price\": 5, \"category\": \"овощи\", \"amount\": 25},\n","  {\"name\": \"чеснок\", \"price\": 12, \"category\": \"овощи\", \"amount\": 26},\n","  {\"name\": \"перец\", \"price\": 13, \"category\": \"овощи\", \"amount\": 27},\n","  {\"name\": \"баклажан\", \"price\": 14, \"category\": \"овощи\", \"amount\": 28},\n","  {\"name\": \"шпинат\", \"price\": 10, \"category\": \"овощи\", \"amount\": 29},\n","  {\"name\": \"курица\", \"price\": 50, \"category\": \"мясо\", \"amount\": 30},\n","  {\"name\": \"говядина\", \"price\": 70, \"category\": \"мясо\", \"amount\": 10},\n","  {\"name\": \"свинина\", \"price\": 60, \"category\": \"мясо\", \"amount\": 11},\n","  {\"name\": \"баранина\", \"price\": 80, \"category\": \"мясо\", \"amount\": 12},\n","  {\"name\": \"индейка\", \"price\": 55, \"category\": \"мясо\", \"amount\": 13},\n","  {\"name\": \"рыба\", \"price\": 40, \"category\": \"мясо\", \"amount\": 14},\n","  {\"name\": \"молоко\", \"price\": 20, \"category\": \"молочные продукты\", \"amount\": 15},\n","  {\"name\": \"сыр\", \"price\": 30, \"category\": \"молочные продукты\", \"amount\": 16},\n","  {\"name\": \"йогурт\", \"price\": 15, \"category\": \"молочные продукты\", \"amount\": 17},\n","  {\"name\": \"масло\", \"price\": 25, \"category\": \"молочные продукты\", \"amount\": 18}\n","]\n","\n","promo_codes_data = [\n","    {\"name\": \"PROMO2024_1\", \"discount\": 15},\n","    {\"name\": \"PROMO2024_2\", \"discount\": 25},\n","    {\"name\": \"PROMO2024_3\", \"discount\": 30},\n","    {\"name\": \"PROMO2024_4\", \"discount\": 45},\n","    {\"name\": \"PROMO2024_5\", \"discount\": 10}\n","]\n","\n","catalog = Catalog([Product(**product_data)\n","                   for product_data in products_data])\n","\n","promos = [PromoCode(**promo_data) for promo_data in promo_codes_data]\n","\n","shopping_cart = ShoppingCart()\n","\n","COMMANDS = [\n","    \"Помощь\",\n","    \"Выйти\",\n","    \"Корзина\",\n","    \"Каталог\",\n","    \"Профиль\",\n","    \"оформить заказ\"\n","]"],"metadata":{"id":"a9mQ228_EsK6","executionInfo":{"status":"ok","timestamp":1732991211719,"user_tz":-300,"elapsed":263,"user":{"displayName":"Slagor","userId":"03320144618615022325"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["def registration(name: str):\n","    global customer\n","    customer = Customer(name)\n","\n","\n","def create_order(shopping_cart, customer, promo):\n","    global current_order\n","    current_order = Order(shopping_cart, customer, promo)\n","\n","\n","def command_help():\n","    return f'Список доступных команд {COMMANDS}'\n","\n","\n","def handler(data):\n","    text = ('Добро пожаловать в онлайн-магазин\\n'\n","            'Чтобы зарегистрироваться используйте команду \"Регистрация\"')\n","    message = data['text']\n","\n","    if message is None:\n","        pass\n","\n","    elif not message:\n","        text = ''\n","\n","    elif message == 'выйти':\n","        data['end_of_session'] = True\n","        text = 'До скорых встреч!'\n","\n","    elif message == 'регистрация':\n","        data['context'] = 'registration'\n","        text = 'Введите ваше имя:'\n","\n","    elif data['context'] == 'registration':\n","        name = message\n","        registration(name)\n","        text = f'Регистрация прошла успешно\\n{command_help()}'\n","        data['context'] = 'main'\n","\n","    elif customer is None and data['context'] != 'registration':\n","        text = 'Для начала зарегистрируйтесь (используйте команду Регистрация)'\n","\n","    elif message == 'помощь':\n","        text = command_help()\n","\n","    elif message == 'корзина':\n","        shopping_cart.print_cart()\n","        if shopping_cart.cart:\n","            data['context'] = 'shopping_cart'\n","            text = 'Чтобы изменить количество продукта используйте команду \"Изменить\"'\n","        else:\n","            text = ''\n","\n","    elif message == 'каталог':\n","        data['context'] = 'catalog'\n","        text = f'Выберете категорию\\n{catalog.products_categories}'\n","\n","    elif message == 'профиль':\n","        text = customer.get_info()\n","\n","    elif message == 'оформить заказ':\n","        data['context'] = 'order'\n","        text = ('У вас есть доступные промокоды\\n'\n","                'Чтобы узнать подробнее используйте команду \"Промокоды\"\\n'\n","                'Чтобы продолжить без промокода напишите \"Продолжить\"')\n","\n","    else:\n","        text = 'Не удалось распознать команду'\n","\n","        if data['context'] == 'shopping_cart':\n","            if message == 'изменить':\n","                text = 'Введите название продукта и необходимое количество через запятую'\n","            elif (\n","                len(message.split(', ')) == 2\n","                and (product_name := message.split(', ')[0]) in catalog.products_names\n","                and (amount := int(message.split(', ')[1])) >= 0\n","            ):\n","                text = shopping_cart.update_product_amount(\n","                    catalog.find_product(product_name), amount\n","                )\n","\n","        elif data['context'] == 'catalog':\n","            if message in catalog.products_categories:\n","                category = message\n","                text = (\n","                    'Выберете продукт\\n'\n","                    f'{catalog.filter_products_names_by_category(category)}'\n","                )\n","            elif message in catalog.products_names:\n","                product_name = message\n","                product = catalog.find_product(product_name)\n","                text = shopping_cart.add_product(product)\n","\n","        elif data['context'] == 'order':\n","            global current_order\n","            if message == 'промокоды':\n","                text = ''\n","                for promo in promos:\n","                    text = '\\n'.join(\n","                        (text, f'{promo.name} - {promo.discount}%')\n","                    )\n","            elif (\n","                (promo_name := message.upper()) in (\n","                    promos_names := [promo.name for promo in promos]\n","                )\n","                or message == 'продолжить'\n","            ):\n","                if message == 'продолжить':\n","                    promo = None\n","                else:\n","                    promo_index = promos_names.index(promo_name)\n","                    promo = promos[promo_index]\n","\n","                create_order(shopping_cart, customer, promo)\n","                text = (\n","                    f'Заказ на сумму {current_order.total_price} '\n","                    'готов к оформлению\\n'\n","                    'Чтобы завершить оформление используйте команду \"Завершить\"'\n","                )\n","\n","            elif message == 'завершить':\n","                current_order.place()\n","                current_order = None\n","                text = ''\n","\n","    return text\n","\n","\n","def main():\n","    data = {\n","        'context': 'main',\n","        'end_of_session': False,\n","        'text': None\n","    }\n","    while True:\n","        print(handler(data))\n","        if data['end_of_session']:\n","            break\n","        message = input('> ').lower()\n","        data['text'] = message\n","\n","\n","customer = None\n","current_order = None\n","\n","if __name__ == '__main__':\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wCOtAz7c6yIG","executionInfo":{"status":"ok","timestamp":1732992442725,"user_tz":-300,"elapsed":1206795,"user":{"displayName":"Slagor","userId":"03320144618615022325"}},"outputId":"939228b5-d2d5-463f-b35a-e398bc580a6e"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Добро пожаловать в онлайн-магазин\n","Чтобы зарегистрироваться используйте команду \"Регистрация\"\n","> регистрация\n","Введите ваше имя:\n","> Абоба\n","Регистрация прошла успешно\n","Список доступных команд ['Помощь', 'Выйти', 'Корзина', 'Каталог', 'Профиль', 'оформить заказ']\n","> корзина\n","В корзине пока что пусто\n","\n","> каталог\n","Выберете категорию\n","['фрукты', 'овощи', 'мясо', 'молочные продукты']\n","> фрукты\n","Выберете продукт\n","['яблоко', 'банан', 'апельсин', 'груша', 'виноград', 'персик', 'ананас', 'киви', 'лимон', 'манго']\n","> яблоко\n","\"яблоко\" добавлено в корзину\n","> мясо\n","Выберете продукт\n","['курица', 'говядина', 'свинина', 'баранина', 'индейка', 'рыба']\n","> говядина\n","\"говядина\" добавлено в корзину\n","> рыба\n","\"рыба\" добавлено в корзину\n","> овощи\n","Выберете продукт\n","['картофель', 'морковь', 'помидор', 'огурец', 'лук', 'капуста', 'чеснок', 'перец', 'баклажан', 'шпинат']\n","> чеснок\n","\"чеснок\" добавлено в корзину\n","> картофель\n","\"картофель\" добавлено в корзину\n","> корзина\n","Наименование Количество Стоимость (без учёта скидок и налога)\n","яблоко       1          10\n","говядина     1          70\n","рыба         1          40\n","чеснок       1          12\n","картофель    1          8\n","Чтобы изменить количество продукта используйте команду \"Изменить\"\n","> изменить\n","Введите название продукта и необходимое количество через запятую\n","> рыба 100\n","Не удалось распознать команду\n","> рыба, 100\n","\"рыба\" добавлено в корзину 13 шт\n","> рыба, 100\n","Товара \"рыба\" нет в наличии 86 шт\n","> яблоко, 3\n","\"яблоко\" добавлено в корзину 2 шт\n","> корзина\n","Наименование Количество Стоимость (без учёта скидок и налога)\n","яблоко       3          30\n","говядина     1          70\n","рыба         14         560\n","чеснок       1          12\n","картофель    1          8\n","Чтобы изменить количество продукта используйте команду \"Изменить\"\n","> оформить заказ\n","У вас есть доступные промокоды\n","Чтобы узнать подробнее используйте команду \"Промокоды\"\n","Чтобы продолжить без промокода напишите \"Продолжить\"\n","> Промокоды\n","\n","PROMO2024_1 - 15%\n","PROMO2024_2 - 25%\n","PROMO2024_3 - 30%\n","PROMO2024_4 - 45%\n","PROMO2024_5 - 10%\n","> PROMO2024_4\n","Заказ на сумму 448.8 готов к оформлению\n","Чтобы завершить оформление используйте команду \"Завершить\"\n","> завершить\n","Заказ оформлен\n","\n","> корзина\n","В корзине пока что пусто\n","\n","> каталог\n","Выберете категорию\n","['фрукты', 'овощи', 'мясо', 'молочные продукты']\n","> фрукты\n","Выберете продукт\n","['яблоко', 'банан', 'апельсин', 'груша', 'виноград', 'персик', 'ананас', 'киви', 'лимон', 'манго']\n","> банан\n","\"банан\" добавлено в корзину\n","> оформить заказ\n","У вас есть доступные промокоды\n","Чтобы узнать подробнее используйте команду \"Промокоды\"\n","Чтобы продолжить без промокода напишите \"Продолжить\"\n","> промокод\n","Не удалось распознать команду\n","> Промокоды\n","\n","PROMO2024_1 - 15%\n","PROMO2024_2 - 25%\n","PROMO2024_3 - 30%\n","PROMO2024_4 - 45%\n","PROMO2024_5 - 10%\n","> PROMO2024_4\n","Заказ на сумму 14.4 готов к оформлению\n","Чтобы завершить оформление используйте команду \"Завершить\"\n","> Завершить\n","Заказ оформлен\n","\n","> выйти\n","До скорых встреч!\n"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":[],"metadata":{"id":"4NyrOOy8B9ED"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":[],"metadata":{"id":"x9OxpNsyCcUo"},"execution_count":null,"outputs":[]}]}